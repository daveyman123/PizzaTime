/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.GridLayout;
import java.awt.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import pizzafinalversioniii.Crust;
import pizzafinalversioniii.CrustEnum;
import pizzafinalversioniii.Toppings;



/**
 *
 * @author PC
 */
public class PizzaUI extends javax.swing.JFrame {
Crust crust;
Toppings Toppings;


    /**
     * Creates new form PizzaUI
     */
     //initialize a dictionary we'll use later
    Map<String, String> dictionaryToppings = new HashMap<String, String>();
    
    
     //initialize an array we'll use later
    ArrayList<JCheckBox> toppingsBoxes = new ArrayList<JCheckBox>(20);
   
    
    //variables
    boolean isSelected = true;
    boolean isNotSelected = false;
    String toppingsList = "";
    
   
    
    public PizzaUI() {
        initComponents();
        
        //center form
        this.setLocationRelativeTo(this);
        //make an array of the different topping checkboxes and fill it
        toppingCheckBoxes();
        
        
        
        //instantiate toppings class
        Toppings = new Toppings();

        crust = new Crust();
        
        
    }
        public void toppingCheckBoxes(){
            
            toppingsBoxes.add(jCheckBox1);
            toppingsBoxes.add(jCheckBox2);
            toppingsBoxes.add(jCheckBox3);
            toppingsBoxes.add(jCheckBox4);
            toppingsBoxes.add(jCheckBox5);
            toppingsBoxes.add(jCheckBox6);
            toppingsBoxes.add(jCheckBox7);
            toppingsBoxes.add(jCheckBox8);
            toppingsBoxes.add(jCheckBox9);
            toppingsBoxes.add(jCheckBox10);
            toppingsBoxes.add(jCheckBox11);
            toppingsBoxes.add(jCheckBox12);
        }
        //method to make the slider
        public int popUpSlider(java.util.Hashtable<Integer,JLabel> labels,JSlider slider){

     int value = 0;      
    slider.setLabelTable(labels);
    slider.setPaintLabels(true);
    slider.setPaintTicks(true);
    slider.setSnapToTicks(true);
    
 
    int moveCount = 0;

    GridLayout layout = new GridLayout(1, 2);
    JPanel sliderPanel = new JPanel();
    sliderPanel.setLayout(layout);
    sliderPanel.add(slider);
    String title = "Topping Amount"; 
    int dialogResponse = JOptionPane.showOptionDialog
            (this,                  // I'm within a JFrame here
             slider,
             title,
             JOptionPane.OK_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,
             null, null, null
            );
    if (JOptionPane.OK_OPTION == dialogResponse) 
         { moveCount = slider.getValue(); }
    else { moveCount = 0; } // works for cancel button, red 'x', and keyboard escape key

    return moveCount;
}

 
   
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOrder = new javax.swing.JTextArea();
        jButtonSubmitOrder = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jRadioButtonRC = new javax.swing.JRadioButton();
        jRadioButtonGFC = new javax.swing.JRadioButton();
        jToggleButtonRedSauce = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabelMaxToppings = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Cooking: Pizza is to be appropriately cooked until crust is cooked and topping is fully warmed."));

        jTextAreaOrder.setColumns(20);
        jTextAreaOrder.setRows(5);
        jScrollPane1.setViewportView(jTextAreaOrder);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
        );

        jButtonSubmitOrder.setText("Submit Order");
        jButtonSubmitOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitOrderActionPerformed(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonReset.setText("Start Over");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(jButtonSubmitOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonReset))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jButtonExit)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSubmitOrder)
                    .addComponent(jButtonReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonExit)
                        .addGap(83, 83, 83))))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Crust Type"));

        buttonGroup1.add(jRadioButtonRC);
        jRadioButtonRC.setSelected(true);
        jRadioButtonRC.setText("Regular Crust");
        jRadioButtonRC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRCActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonGFC);
        jRadioButtonGFC.setText("Gluten Free Crust");
        jRadioButtonGFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonGFCActionPerformed(evt);
            }
        });

        jToggleButtonRedSauce.setText("Red Sauce");
        jToggleButtonRedSauce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRedSauceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButtonRedSauce)
                    .addComponent(jRadioButtonGFC)
                    .addComponent(jRadioButtonRC))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonRC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonGFC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToggleButtonRedSauce))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Toppings"));

        jCheckBox1.setText("Pizza Cheese");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox3.setText("Diced Green Pepper");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("Pepperoni");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jCheckBox5.setText("Sliced Mushroom");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jCheckBox6.setText("Diced Jalapenos");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        jCheckBox7.setText("Sardines");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });

        jCheckBox8.setText("Pineapple Chunks");
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });

        jCheckBox9.setText("Tofu");
        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox9ActionPerformed(evt);
            }
        });

        jCheckBox10.setText("Ham Chunks");
        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox10ActionPerformed(evt);
            }
        });

        jCheckBox11.setText("Dry Red Pepper");
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });

        jCheckBox12.setText("Dried Basil");
        jCheckBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox12ActionPerformed(evt);
            }
        });

        jLabel3.setText("Amount of toppings left: ");

        jLabelMaxToppings.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelMaxToppings.setText("7");

        jCheckBox2.setText("Diced Onion");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox10)
                    .addComponent(jLabelMaxToppings))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelMaxToppings))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(2, 2, 2)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox7)
                        .addGap(2, 2, 2)
                        .addComponent(jCheckBox8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox12))))
        );

        jLabel2.setBackground(new java.awt.Color(0, 153, 153));
        jLabel2.setFont(new java.awt.Font("Lucida Console", 1, 24)); // NOI18N
        jLabel2.setText("Welcome to Java Pizza Program");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSubmitOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitOrderActionPerformed
        // TODO add your handling code here:
        if (Toppings.getMaxToppings() < 0){
            JFrame frame = new JFrame();
            JOptionPane.showMessageDialog(frame,
    "Too many toppings",
    "Topping error",
    JOptionPane.ERROR_MESSAGE);
        }
            else{
            
        
                if (jRadioButtonRC.isSelected()){
            crust.setCrustChoice("Regular Crust");
        }
        else{
            crust.setCrustChoice("Gluten Free Crust");
        }
        toppingsList = "";
        Toppings.getToppings().forEach((key, value) -> toppingsList += key + " Amount: " + value + "\n");
       
        
        jTextAreaOrder.setText(crust.toString() +"\nToppings:\n" + toppingsList);

    }//GEN-LAST:event_jButtonSubmitOrderActionPerformed

    }
 
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        // save amount to instantiated class
        // determine if the max amount has been reached yet
               // if max amount has been reached, make alert pop up
      
         JSlider slider = new JSlider(250, 500, 250);
    slider.setMajorTickSpacing(250);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox1.isSelected()){
            
               
    labelTable.put(new Integer(500), new JLabel("0.5 cups")); //2 toppings
    labelTable.put(new Integer(250), new JLabel("0.25 cups")); //1 topping
    
    int value = popUpSlider(labelTable,slider);
    if (value == 500){
        Toppings.setMaxToppings(-2);
        
    }
    else if(value==250){
        Toppings.setMaxToppings(-1);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox1.getText(), Double.toString(d2/1000)+" cups");
    Toppings.setToppings(dictionaryToppings);
    
        }
        else if(!jCheckBox1.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                     JOptionPane.showMessageDialog(null, (dictionaryToppings.get(jCheckBox1.getText())));
                    if (dictionaryToppings.get(jCheckBox1.getText()).equals("0.5 cups")){
                    Toppings.setMaxToppings(2);
                    }
                    else if (dictionaryToppings.get(jCheckBox1.getText()).equals("0.25 cups")){
                        Toppings.setMaxToppings(1);
                        
                    }
                   
                   dictionaryToppings.remove(jCheckBox1.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
        
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jRadioButtonRCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRCActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jRadioButtonRCActionPerformed

    private void jToggleButtonRedSauceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRedSauceActionPerformed
        // TODO add your handling code here:
        if (jToggleButtonRedSauce.isSelected()){
            
             jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
         //popup slider
         
             final JSlider slider = new JSlider(250, 500, 250);
    slider.setMajorTickSpacing(250);
    java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
    labelTable.put(new Integer(500), new JLabel("0.5 cups"));
    labelTable.put(new Integer(250), new JLabel("0.25 cups"));
    int sliderValue = popUpSlider(labelTable,slider);
    
    //set redsauce to true
    crust.setRedSauce(true);
    //set red sauce amount
    Double d2=Double.valueOf(sliderValue);
    
    crust.setSauceAmount(Double.toString(d2/1000)+" cups");
    }//GEN-LAST:event_jToggleButtonRedSauceActionPerformed
        else if (!jToggleButtonRedSauce.isSelected()){
            crust.setRedSauce(false);
            Toppings.setMaxToppings(1);
             jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
        }
    
    }
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
                     JSlider slider = new JSlider(125, 250, 125);
    slider.setMajorTickSpacing(125);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox2.isSelected()){
            
               
    labelTable.put(new Integer(125), new JLabel("0.125 cups")); //2 toppings
    labelTable.put(new Integer(250), new JLabel("0.25 cups")); //1 topping
    
    int value = popUpSlider(labelTable,slider);
    if (value == 125){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==250){
        Toppings.setMaxToppings(-2);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox2.getText(), Double.toString(d2/1000)+" cups");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox2.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox2.getText()).equals("0.125 cups")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox2.getText()).equals("0.25 cups")){
                        Toppings.setMaxToppings(2);
                        
                    }
                   dictionaryToppings.remove(jCheckBox2.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
 
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
                     JSlider slider = new JSlider(100, 400, 100);
    slider.setMajorTickSpacing(100);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox7.isSelected()){
            
               
    labelTable.put(new Integer(100), new JLabel("1")); 
    labelTable.put(new Integer(200), new JLabel("2")); 
    labelTable.put(new Integer(300), new JLabel("3")); 
    labelTable.put(new Integer(400), new JLabel("4")); 
    
    int value = popUpSlider(labelTable,slider);
    
    if (value == 100){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==200){
        Toppings.setMaxToppings(-2);
    }
    
     else  if (value == 300){
        Toppings.setMaxToppings(-3);
        
    }
    else if(value==400){
        Toppings.setMaxToppings(-4);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox7.getText(), Double.toString(d2/100)+" sardines");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox7.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox7.getText()).equals("1.0 sardines")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox7.getText()).equals("2.0 sardines")){
                        Toppings.setMaxToppings(2);
                        
                    }
                    else if (dictionaryToppings.get(jCheckBox7.getText()).equals("3.0 sardines")){
                    Toppings.setMaxToppings(3);
                    }
                    else if (dictionaryToppings.get(jCheckBox7.getText()).equals("4.0 sardines")){
                        Toppings.setMaxToppings(4);
                        
                    }
                   dictionaryToppings.remove(jCheckBox7.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
        
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
               // TODO add your handling code here:
                     JSlider slider = new JSlider(125, 250, 125);
    slider.setMajorTickSpacing(125);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox3.isSelected()){
            
               
    labelTable.put(new Integer(125), new JLabel("0.125 cups")); //2 toppings
    labelTable.put(new Integer(250), new JLabel("0.25 cups")); //1 topping
    
    int value = popUpSlider(labelTable,slider);
    if (value == 125){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==250){
        Toppings.setMaxToppings(-2);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox3.getText(), Double.toString(d2/1000)+" cups");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox3.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox3.getText()).equals("0.125 cups")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox3.getText()).equals("0.25 cups")){
                        Toppings.setMaxToppings(2);
                        
                    }
                   dictionaryToppings.remove(jCheckBox3.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
        
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
            // TODO add your handling code here:
                // TODO add your handling code here:
                     JSlider slider = new JSlider(200, 800, 200);
    slider.setMajorTickSpacing(200);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox4.isSelected()){
            
               
    labelTable.put(new Integer(200), new JLabel("2 pieces")); 
    labelTable.put(new Integer(400), new JLabel("4")); 
    labelTable.put(new Integer(600), new JLabel("3")); 
    labelTable.put(new Integer(800), new JLabel("4")); 
    
    int value = popUpSlider(labelTable,slider);
    
    if (value == 200){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==400){
        Toppings.setMaxToppings(-2);
    }
    
     else  if (value == 600){
        Toppings.setMaxToppings(-3);
        
    }
    else if(value==800){
        Toppings.setMaxToppings(-4);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox4.getText(), Double.toString(d2/100)+" pieces");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox4.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox4.getText()).equals("2.0 pieces")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox4.getText()).equals("4.0 pieces")){
                        Toppings.setMaxToppings(2);
                        
                    }
                    else if (dictionaryToppings.get(jCheckBox4.getText()).equals("6.0 pieces")){
                    Toppings.setMaxToppings(3);
                    }
                    else if (dictionaryToppings.get(jCheckBox4.getText()).equals("8.0 pieces")){
                        Toppings.setMaxToppings(4);
                        
                    }
                   dictionaryToppings.remove(jCheckBox4.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
               // TODO add your handling code here:
               // TODO add your handling code here:
                     JSlider slider = new JSlider(125, 250, 125);
    slider.setMajorTickSpacing(125);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox5.isSelected()){
            
               
    labelTable.put(new Integer(125), new JLabel("0.125 cups")); //2 toppings
    labelTable.put(new Integer(250), new JLabel("0.25 cups")); //1 topping
    
    int value = popUpSlider(labelTable,slider);
    if (value == 125){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==250){
        Toppings.setMaxToppings(-2);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox5.getText(), Double.toString(d2/1000)+" cups");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox5.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox5.getText()).equals("0.125 cups")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox5.getText()).equals("0.25 cups")){
                        Toppings.setMaxToppings(2);
                        
                    }
                   dictionaryToppings.remove(jCheckBox5.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
        
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        // TODO add your handling code here:
        JSlider slider = new JSlider(200, 800, 200);
    slider.setMajorTickSpacing(200);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox8.isSelected()){
            
               
    labelTable.put(new Integer(200), new JLabel("2 pieces")); 
    labelTable.put(new Integer(400), new JLabel("4")); 
    labelTable.put(new Integer(600), new JLabel("3")); 
    labelTable.put(new Integer(800), new JLabel("4")); 
    
    int value = popUpSlider(labelTable,slider);
    
    if (value == 200){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==400){
        Toppings.setMaxToppings(-2);
    }
    
     else  if (value == 600){
        Toppings.setMaxToppings(-3);
        
    }
    else if(value==800){
        Toppings.setMaxToppings(-4);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox8.getText(), Double.toString(d2/100)+" pieces");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox8.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox8.getText()).equals("2.0 pieces")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox8.getText()).equals("4.0 pieces")){
                        Toppings.setMaxToppings(2);
                        
                    }
                    else if (dictionaryToppings.get(jCheckBox8.getText()).equals("6.0 pieces")){
                    Toppings.setMaxToppings(3);
                    }
                    else if (dictionaryToppings.get(jCheckBox8.getText()).equals("8.0 pieces")){
                        Toppings.setMaxToppings(4);
                        
                    }
                   dictionaryToppings.remove(jCheckBox8.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        // TODO add your handling code here:
         JSlider slider = new JSlider(125, 250, 125);
    slider.setMajorTickSpacing(125);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox6.isSelected()){
            
               
    labelTable.put(new Integer(125), new JLabel("0.125 cups")); //2 toppings
    labelTable.put(new Integer(250), new JLabel("0.25 cups")); //1 topping
    
    int value = popUpSlider(labelTable,slider);
    if (value == 125){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==250){
        Toppings.setMaxToppings(-2);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox6.getText(), Double.toString(d2/1000)+" cups");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox6.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox6.getText()).equals("0.125 cups")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox6.getText()).equals("0.25 cups")){
                        Toppings.setMaxToppings(2);
                        
                    }
                   dictionaryToppings.remove(jCheckBox6.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
        
                                            
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9ActionPerformed
        // TODO add your handling code here:
        JSlider slider = new JSlider(250, 500, 250);
    slider.setMajorTickSpacing(250);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox9.isSelected()){
            
               
    labelTable.put(new Integer(500), new JLabel("0.5 cups")); //2 toppings
    labelTable.put(new Integer(250), new JLabel("0.25 cups")); //1 topping
    
    int value = popUpSlider(labelTable,slider);
    if (value == 500){
        Toppings.setMaxToppings(-2);
        
    }
    else if(value==250){
        Toppings.setMaxToppings(-1);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox9.getText(), Double.toString(d2/1000)+" cups");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox1.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox9.getText()).equals("0.5 cups")){
                    Toppings.setMaxToppings(2);
                    }
                    else if (dictionaryToppings.get(jCheckBox9.getText()).equals("0.25 cups")){
                        Toppings.setMaxToppings(1);
                        
                    }
                   dictionaryToppings.remove(jCheckBox9.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
    }//GEN-LAST:event_jCheckBox9ActionPerformed

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed
        // TODO add your handling code here:
        JSlider slider = new JSlider(400, 1600, 400);
    slider.setMajorTickSpacing(400);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox10.isSelected()){
            
               
    labelTable.put(new Integer(400), new JLabel("4 pieces")); 
    labelTable.put(new Integer(800), new JLabel("8")); 
    labelTable.put(new Integer(1200), new JLabel("12")); 
    labelTable.put(new Integer(1600), new JLabel("16")); 
    
    int value = popUpSlider(labelTable,slider);
    
    if (value == 400){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==800){
        Toppings.setMaxToppings(-2);
    }
    
     else  if (value == 1200){
        Toppings.setMaxToppings(-3);
        
    }
    else if(value==1600){
        Toppings.setMaxToppings(-4);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox10.getText(), Double.toString(d2/100)+" pieces");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox10.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox10.getText()).equals("4.0 pieces")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox10.getText()).equals("8.0 pieces")){
                        Toppings.setMaxToppings(2);
                        
                    }
                    else if (dictionaryToppings.get(jCheckBox10.getText()).equals("12.0 pieces")){
                    Toppings.setMaxToppings(3);
                    }
                    else if (dictionaryToppings.get(jCheckBox10.getText()).equals("16.0 pieces")){
                        Toppings.setMaxToppings(4);
                        
                    }
                   dictionaryToppings.remove(jCheckBox10.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
                                              

        
    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed
        // TODO add your handling code here:
         JSlider slider = new JSlider(100, 400, 100);
    slider.setMajorTickSpacing(100);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox11.isSelected()){
            
               
    labelTable.put(new Integer(100), new JLabel("1 sprinkle")); 
    labelTable.put(new Integer(200), new JLabel("2")); 
    labelTable.put(new Integer(300), new JLabel("3")); 
    labelTable.put(new Integer(400), new JLabel("4")); 
    
    int value = popUpSlider(labelTable,slider);
    
    if (value == 100){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==200){
        Toppings.setMaxToppings(-2);
    }
    
     else  if (value == 300){
        Toppings.setMaxToppings(-3);
        
    }
    else if(value==400){
        Toppings.setMaxToppings(-4);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox11.getText(), Double.toString(d2/100)+" sprinkles");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox11.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox11.getText()).equals("1.0 sprinkles")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox11.getText()).equals("2.0 sprinkles")){
                        Toppings.setMaxToppings(2);
                        
                    }
                    else if (dictionaryToppings.get(jCheckBox11.getText()).equals("3.0 sprinkles")){
                    Toppings.setMaxToppings(3);
                    }
                    else if (dictionaryToppings.get(jCheckBox11.getText()).equals("4.0 sprinkles")){
                        Toppings.setMaxToppings(4);
                        
                    }
                   dictionaryToppings.remove(jCheckBox11.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
    }//GEN-LAST:event_jCheckBox11ActionPerformed

    private void jCheckBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox12ActionPerformed
        // TODO add your handling code here:
         JSlider slider = new JSlider(100, 200, 100);
    slider.setMajorTickSpacing(100);
            
            java.util.Hashtable<Integer,JLabel> labelTable = new java.util.Hashtable<Integer,JLabel>();
        if (jCheckBox12.isSelected()){
            
               
    labelTable.put(new Integer(100), new JLabel("1 sprinkle")); 
    labelTable.put(new Integer(200), new JLabel("2 sprinkles")); 
    
    
    int value = popUpSlider(labelTable,slider);
    
    if (value == 100){
        Toppings.setMaxToppings(-1);
        
    }
    else if(value==200){
        Toppings.setMaxToppings(-2);
    }
    else{
        jCheckBox1.setSelected(false);
       
    }
    
    
    Double d2=Double.valueOf(value);
    dictionaryToppings.put(jCheckBox12.getText(), Double.toString(d2/100)+" sprinkles");
    Toppings.setToppings(dictionaryToppings);
 
        }
        else if(!jCheckBox12.isSelected()){
                    //remove from dictionary and instantiated class if not selected
                    
                    Toppings.setToppings(dictionaryToppings);
                    if (dictionaryToppings.get(jCheckBox12.getText()).equals("1.0 sprinkles")){
                    Toppings.setMaxToppings(1);
                    }
                    else if (dictionaryToppings.get(jCheckBox12.getText()).equals("2.0 sprinkles")){
                        Toppings.setMaxToppings(2);
                        
                    
                    
                        
                    }
                   dictionaryToppings.remove(jCheckBox12.getText()); 
                }
    
       jLabelMaxToppings.setText(Integer.toString(Toppings.getMaxToppings()));
    }//GEN-LAST:event_jCheckBox12ActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
        //clear all selections and enable resubmission
        // a more elegant way to do this would be to loop through the group if all of the checkboxes are in a group
        for(JCheckBox cbox : toppingsBoxes){
            cbox.setSelected(false);
        }
                
        buttonGroup1.clearSelection();
        jRadioButtonRC.setSelected(true);
        jToggleButtonRedSauce.setSelected(false);
        jTextAreaOrder.setText("");
        
        // clear stored crust, sauce, and topping choices
        crust.setCrustChoice("");
        toppingsList = "";
        dictionaryToppings.clear();
        
        // reset toppings count to original number
        Toppings.setMaxToppingsValue(7);
        
        // change remaining toppings choices to current count
        jLabelMaxToppings.setText(Integer.toString(7));
        
        
        
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jRadioButtonGFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonGFCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonGFCActionPerformed
      
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PizzaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PizzaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PizzaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PizzaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try{
                    Thread.sleep(2000);
                }
                catch(Exception e){
                    
                }
                
                new PizzaUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSubmitOrder;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelMaxToppings;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButtonGFC;
    private javax.swing.JRadioButton jRadioButtonRC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaOrder;
    private javax.swing.JToggleButton jToggleButtonRedSauce;
    // End of variables declaration//GEN-END:variables

    
}
